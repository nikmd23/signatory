@model SettingsViewModel

@{
    ViewBag.Title = string.Format("Settings for {0}/{1}", Model.RepoOwner, Model.RepoName);
}

<form method="post">
    <div class="row">
        <div class="page-header">
            <button type="submit" class="btn btn-success pull-right"><i class="icon-save"></i> Save</button>

            <h2 style="margin-bottom: -5px;">Settings:</h2>
            <small class="muted">
                @Model.RepoOwner/@Model.RepoName
            </small>
        </div>

        <div class="span12">
            <fieldset>
                @if (!ViewContext.ViewData.ModelState.IsValid) { 
                    <div class="row">
                        <div class="span12">
                            @Html.ValidationSummary(true, "Looks like we had a little problem with the form. :(")
                        </div>
                    </div>
                }

                <div class="row">
                    <div class="span2">
                        <div class="control-group">
                            Require a CLA?
                            <div class="controls">
                                <label class="radio inline">
                                    <input type="radio" name="RequireCla" value="False" @(!Model.RequireCla ? "checked=\"checked\"" : "") />
                                    No
                                </label>
                                <label class="radio inline">
                                    <input type="radio" name="RequireCla" value="True" @(Model.RequireCla ? "checked=\"checked\"" : "")/>
                                    Yes
                                </label>
                                @Html.ValidationMessageFor(m => m.RequireCla, null, new { @class = "help-inline" })
                            </div>
                        </div>
                    </div>
                    <div class="span4" data-state="mutable" style="opacity: 0">
                        <div class="control-group">
                            @Html.LabelFor(m => m.AccessToken, new { @class = "control-label" })
                            <div class="controls">
                                <div class="input-append">
                                    @Html.TextBoxFor(m => m.AccessToken, new { data_state = "disableable", @class = "input-xlarge" })
                                    <span class="add-on"><i class="icon-eye-open"></i></span>
                                </div>
                                
                                <small class="help-block">GitHub access token's can be created on the <a href="https://github.com/settings/applications" target="_blank">Authorized Applications</a> page.</small>
                                @Html.ValidationMessageFor(m => m.AccessToken, null, new { @class = "help-inline" })
                            </div>
                        </div>
                    </div>
                    <div class="span6" data-state="mutable" style="opacity: 0">
                        <img src="/Content/images/accessToken.png"/>
                    </div>
                </div>

                <div class="row" data-state="mutable" style="opacity: 0">
                    <div class="span12">
                        <div class="control-group">
                            @Html.LabelFor(m => m.LicenseText, new { @class = "control-label" })
                            <div class="controls">
                                @Html.TextAreaFor(m => m.LicenseText, new { @class = "input-block-level", rows = 20, style = "resize: vertical;",  data_state = "disableable" })
                                <small class="help-block">License text supports <a href="http://daringfireball.net/projects/markdown/">Markdown</a>. &bull; <code>{repo}</code> will be replaced with '<strong>@Model.RepoName</strong>' when shown.</small>
                                @Html.ValidationMessageFor(m => m.LicenseText, null, new { @class = "help-inline" })
                            </div>
                        </div>
                    </div>
                </div>
            </fieldset>
        </div>
    </div>
</form>

@section scripts{
    <script>
        function toggleState(isTrue) {
            if (isTrue) {
                $("[data-state='mutable']").css('opacity', 1);
                $("[data-state='disableable']").prop('disabled', false);
            } else {
                $("[data-state='disableable']").prop('disabled', true);
                $("[data-state='mutable']").css('opacity', 0);
            }
        }

        $(function () {
            $('.validation-summary-errors').addClass('alert alert-error');
            $('.input-validation-error').parents('.control-group').addClass('error');

            $("input:radio[name='RequireCla']").change(function(e) {
                toggleState(e.target.value === 'True');
            });
            toggleState($("input:radio[name='RequireCla']:checked").val() === 'True');
            
            $('#tokenEye').click(function () {
                var accessToken = $('#AccessToken'), type = accessToken.attr('type');
                if (type === 'password') {
                    accessToken.attr('type', 'text');
                    $('#tokenEyeIcon').removeClass('icon-eye-open').addClass('icon-eye-close');
                } else {
                    accessToken.attr('type', 'password');
                    $('#tokenEyeIcon').removeClass('icon-eye-close').addClass('icon-eye-open');
                }
            });
        });
    </script>
}